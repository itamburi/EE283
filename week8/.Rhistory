mutate(p = map(res, extr_pval))
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(p = -log10( map(res, extr_pval) )) %>%
select(!c("data", "res"))
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval),
`-log10p` = -log10(p)
) %>%
select(!c("data", "res"))
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval),
`-log10p` = -log10(as.numeric(p))
) %>%
select(!c("data", "res"))
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res"))
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res"))
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=.))
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=.))
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
mal
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest()
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
mal = read_tsv("allhaps.malathion.200kb.txt.gz")
View(mal)
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treat=str_sub(pool,2,2))
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treatment=str_sub(pool,2,2))
# (1) - fit this model and extract the -log10(p) at every location in the genome using group_by, nest, and map.
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treatment=str_sub(pool,2,2))
# (1) - fit this model and extract the -log10(p) at every location in the genome using group_by, nest, and map.
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treatment=str_sub(pool,2,2))
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
names(mal)
# (1) - fit this model and extract the -log10(p) at every location in the genome using group_by, nest, and map.
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treatt=str_sub(pool,2,2))
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
names(mal)
# (1) - fit this model and extract the -log10(p) at every location in the genome using group_by, nest, and map.
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treat=str_sub(pool,2,2))
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
names(mal)
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
names(mal)
aov = mal %>%
select(-pool) %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
# (1) - fit this model and extract the -log10(p) at every location in the genome using group_by, nest, and map.
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treat=str_sub(pool,2,2))
names(mal)
z = mal %>%
group_by(chr, pos, treat, founder) %>%
sumamrise(n = n())
View(z)
z = mal %>%
group_by(chr, pos, treat, founder) %>%
summarise(n = n())
View(z)
View(mal)
z = mal %>%
filter(
chr  == "chrX",
pos == "316075"
)
View(z)
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest()
library(tidyverse)
library(broom)
getwd()
# (1) - fit this model and extract the -log10(p) at every location in the genome using group_by, nest, and map.
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treat=str_sub(pool,2,2))
names(mal)
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest()
View(aov)
aov$data[1]
z = aov$data[1]
z = unlist(aov$data[1])
z = data.frame(aov$data[1])
View(z)
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
mymod1(z)
z = data.frame(aov$data[1])
mymod1(z)
z = mal %>%
group_by(chr, pos, treat, founder) %>%
summarise(nobs = n())
z = mal %>%
group_by(chr, pos, treat, founder) %>%
summarise(nobs = n())
z = mal %>%
group_by(chr, pos, treat) %>%
summarise(nobs = n())
z = mal %>%
group_by(chr, pos) %>%
summarise(nobs = n())
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest()
View(mymod1)
aov = mal %>%
filter(chr=="chrX") %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
z = mal %>%
filter(
chr == "chrX", pos == 21856075
)
View(z)
z = mal %>%
filter(
#chr == "chrX", pos == 21856075,
is.na(freq)
)
View(z)
aov = mal %>%
filter(chr=="chrX", is.na(freq) == FALSE) %>%
filter
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(chr=="chrX", is.na(freq) == FALSE) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1))
View(aov)
aov = mal %>%
filter(
chr=="chrX",
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res"))
aov = mal %>%
filter(
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res"))
mymod2 <- function(df){
anova(lm(asin(sqrt(freq)) ~ founder + treat %in% founder, data=df))
}
aov = mal %>%
filter(
chr=="chrX",
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod2))
View(aov)
aov = mal %>%
filter(
chr=="chrX",
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod2)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res"))
aov = mal %>%
filter(
chr=="chrX",
is.na(freq) == FALSE
)
View(aov)
aov = mal %>%
filter(
chr=="chrX",
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod2))
z = aov$res[1]
extr_pval(z)
View(mal)
z=data.frame(z)
extr_pval(z)
View(z)
mymod2 <- function(df){
anova(lm(asin(sqrt(freq)) ~ founder + treat %in% founder, data=df))
}
extr_pval2 <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[2])   # treat:founder is in row 2
}
aov = mal %>%
filter(
chr=="chrX",
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod2)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval2),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res"))
aov = mal %>%
filter(
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod2)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval2),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res"))
write.csv("model2 interaction of treatment to founder at each genome position.csv")
write.csv(aov, "model2 interaction of treatment to founder at each genome position.csv")
aov = mal %>%
filter(
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod2)) %>%
# broom::glance extracts sumamry statistincs from myMod
mutate(
p = map(res, extr_pval2),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res")) %>%
ungroup()
write.csv(aov, "model2 interaction of treatment to founder at each genome position.csv")
aov = mal %>%
filter(
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod2)) %>%
mutate(
p = map(res, extr_pval2),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res")) %>%
unnest()
write.csv(aov, "model2 interaction of treatment to founder at each genome position.csv")
# (1) - fit this model and extract the -log10(p) at every location in the genome using group_by, nest, and map.
mal = read_tsv("allhaps.malathion.200kb.txt.gz") %>%
mutate(treat=str_sub(pool,2,2))
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
mutate(
p = map(res, extr_pval1),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res")) %>%
unnest()
mymod1 <- function(df){
anova(lm( asin(sqrt(freq)) ~ treat + founder + treat:founder, data=df))
}
extr_pval1 <- function(df) {
pval <- df$`Pr(>F)` # Extracts p-values for all terms of model
return(pval[3])   # treat:founder is in row 3
}
aov = mal %>%
filter(
is.na(freq) == FALSE
) %>%
group_by(chr, pos) %>%
nest() %>%
mutate(res = map(data, mymod1)) %>%
mutate(
p = map(res, extr_pval1),
neg.log10p = -log10(as.numeric(p))
) %>%
select(!c("data", "res")) %>%
unnest()
write.csv(aov, "model1 interaction of treatment to founder at each genome position.csv")
mod1 = read.csv("model1 interaction of treatment to founder at each genome position.csv")
mod1 = read.csv("model2 interaction of treatment to founder at each genome position.csv")
mod1 = read.csv("model1 interaction of treatment to founder at each genome position.csv")
mod2 = read.csv("model2 interaction of treatment to founder at each genome position.csv")
View(mod1)
View(mod2)
mod1 = read.csv("model1 interaction of treatment to founder at each genome position.csv", row.names = FALSE)
mod2 = read.csv("model2 interaction of treatment to founder at each genome position.csv", row.names = FALSE)
mod1 = read.csv("model1 interaction of treatment to founder at each genome position.csv", row.names = FALSE)
mod1 = read.csv("model1 interaction of treatment to founder at each genome position.csv") %>%
select(chr, pos, neg.log10p) %>%
rename(mod1.signif = "neg.log10p")
mod2 = read.csv("model2 interaction of treatment to founder at each genome position.csv") %>%
select(chr, pos, neg.log10p) %>%
rename(mod1.signif = "neg.log10p")
idx1 = mod1 %>% distinct(chr, pos)
View(idx1)
idx1 = mod1 %>%
distinct(chr, pos) %>%
mutate( idx = paste0(chr,pos) )
idx2 = mod2 %>%
distinct(chr, pos) %>%
mutate( idx = paste0(chr,pos) )
identical(idx1$idx, idx2$idx)
merge = mod1 %>% left_join(., mod2)
View(merge)
mod1 = read.csv("model1 interaction of treatment to founder at each genome position.csv") %>%
select(chr, pos, neg.log10p) %>%
rename(mod1.signif = "neg.log10p")
mod2 = read.csv("model2 interaction of treatment to founder at each genome position.csv") %>%
select(chr, pos, neg.log10p) %>%
rename(mod2.signif = "neg.log10p")
idx1 = mod1 %>%
distinct(chr, pos) %>%
mutate( idx = paste0(chr,pos) )
idx2 = mod2 %>%
distinct(chr, pos) %>%
mutate( idx = paste0(chr,pos) )
identical(idx1$idx, idx2$idx)
merge = mod1 %>% left_join(., mod2)
write.csv(merge, "interaction of treatment to founder at each genome position by two models (neg.log10p).csv", row.names = FALSE)
View(merge)
